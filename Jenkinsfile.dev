pipeline {
    agent any

    environment {
        // Configuración de la función de Google Cloud
        RUTA_SOURCE = 'source'
        RUTA_SOURCE_FILES = 'src'
        GCP_PROJECT_ID = 'devioz-pe-dev-analitica'
        GCP_SERVICE_ACCOUNT_CREDENTIALS_ID = 'devioz-corporativo-gcp-devops-analitica-dev'
        GCP_SERVICE_ACCOUNT_EMAIL = 'alfredo@devioz-pe-dev-analitica.iam.gserviceaccount.com'
        GCP_LOCATION = 'us-central1'
        GCP_RUNTIME = 'python310'
        GCP_MEMORY = '16384MB'
        GCP_TIMEOUT = '540s'
        GCP_MAX_INSTANCES = 2
        GCP_ALLOW_UNAUTHENTICATED = true
        
        // Nombres de las funciones a desplegar
        functionNames = [
            'ingesta-crossnet-data-plana'
        ]
    }

    stages {
        stage('Descargar Fuentes') {
            steps {
                deleteDir() // Limpia el directorio de trabajo
                checkout scm // Descarga el código fuente del repositorio
            }
        }

        stage('Despliegue Funciones') {
            steps {
                script {
                    // Definimos la función `deployFunction` dentro de un bloque `script`

                    def deployFunction(String functionName) {
                        dir("${RUTA_SOURCE}/$functionName/$RUTA_SOURCE_FILES") {
                                withCredentials([file(credentialsId: "${GCP_SERVICE_ACCOUNT_CREDENTIALS_ID}", variable: 'SECRET')]) {
                                    sh "ls -lsa"
                                    sh "pwd"
                                    sh "gcloud auth activate-service-account --key-file=\$SECRET"
                                    sh "gcloud config set project ${GCP_PROJECT_ID}"
                                    sh """ gcloud alpha functions deploy ${functionName} \
                                            --gen2 \
                                            --region=${GCP_LOCATION} \
                                            --runtime=${GCP_RUNTIME} \
                                            --trigger-http \
                                            --memory ${GCP_MEMORY} \
                                            --entry-point=main \
                                            --timeout ${GCP_TIMEOUT} \
                                            --max-instances ${GCP_MAXINTANCES} \
                                            --ingress-settings all \
                                            --service-account ${GCP_SERVICE_ACCOUNT} \
                                            --source=. \
                                            --env-vars-file .env.yaml \
                                            --allow-unauthenticated """
                                }
                            }
                    }

                    // Llamada a la función `deployFunction` para cada función de `functionNames`
                    functionNames.each { functionName ->
                        deployFunction(functionName)
                    }
                }
            }
        }

        stage('Limpiar Workspace') {
            steps {
                deleteDir() // Limpia el espacio de trabajo
            }
        }
    }
}
